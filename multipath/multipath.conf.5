.TH MULTIPATH.CONF 5 "30 November 2006"
.SH NAME
multipath.conf \- multipath daemon configuration file
.SH DESCRIPTION
.B "multipath.conf"
is the configuration file for the multipath daemon. It is used to
overwrite the built-in configuration table of \fBmultipathd\fP.
Any line whose first non-white-space character is a '#' is considered
a comment line. Empty lines are ignored.
.SH SYNTAX
The configuration file contains entries of the form:
.RS
.nf
.ft B
.sp
<section> {
.RS
.ft B
<attribute> <value>
.I "..."
.ft B
<subsection> {
.RS
.ft B
<attribute> <value>
.I "..."
.RE
}
.RE
}
.ft R
.fi
.RE
.LP
Each \fIsection\fP contains one or more attributes or subsections. The
recognized keywords for attributes or subsections depend on the
section in which they occor.
.LP
The following \fIsection\fP keywords are recognized:
.TP 17
.B defaults
This section defines default values for attributes which are used
whenever no values are given in the appropriate device or multipath
sections.
.TP
.B blacklist
This section defines which devices should be excluded from the
multipath topology discovery.
.TP
.B blacklist_exceptions
This section defines which devices should be included in the
multipath topology discovery, despite being listed in the
.I blacklist
section.
.TP
.B multipaths
This section defines the multipath topologies. They are indexed by a
\fIWorld Wide Identifier\fR(wwid), which is taken to be the value of
the udev attribute given by the
\fIuid_attribute\fR keyword.
.TP
.B devices
This section defines the device-specific settings.
.RE
.LP
.SH "defaults section"
The
.B defaults
section recognizes the following keywords:
.TP 17
.B polling_interval
interval between two path checks in seconds. For properly functioning paths,
the interval between checks will gradually increase to
.B max_polling_interval;
default is
.I 5
.TP
.B max_polling_interval
maximal interval between two path checks in seconds; default is
.I 4 * polling_interval
.TP
.B multipath_dir
directory where the dynamic shared objects are stored; default is system
dependent, commonly
.I /lib/multipath
.TP
.B find_multipaths
If set to
.I yes
, instead of trying to create a multipath device for every non-blacklisted
path, multipath will only create a device if one of three condidions are
met.
.I 1
There are at least two non-blacklisted paths with the same wwid,
.I 2
the user manually forces the creation, by specifying a device with the multipath
command, or
.I 3
a path has the same WWID as a multipath device that was previously created
while find_multipaths was set (even if that multipath device doesn't currently
exist).
Whenever a multipath device is created with find_multipaths set, multipath will
remeber the WWID of the device, so that it will automatically create the
device again, as soon as it sees a path with that WWID. This should allow most
users to have multipath automatically choose the correct paths to make into
multipath devices, without having to edit the blacklist; Default is
.I no
.TP
.B verbosity
default verbosity. Higher values increase the verbosity level. Valid
levels are between 0 and 6; default is
.I 2
.TP
.B reassign_maps
enable reassigning of device-mapper maps. With this option multipathd
will remap existing device-mapper maps to always point to multipath
device, not the underlying block devices. Possible values are
\fIyes\fR and \fIno\fR. Default is
.I yes
.TP
.B path_selector
The default path selector algorithm to use; they are offered by the
kernel multipath target. There are three selector algorithms.
.RS
.TP 12
.B "round-robin 0"
Loop through every path in the path group, sending the same amount of IO to
each.
.TP
.B "queue-length 0"
Send the next bunch of IO down the path with the least amount of outstanding IO.
.TP
.B "service-time 0"
Choose the path for the next bunch of IO based on the amount of outstanding IO
to the path and its relative throughput.
.RE
.TP
.B path_grouping_policy
The default path grouping policy to apply to unspecified
multipaths. Possible values are
.RS
.TP 12
.B failover
1 path per priority group
.TP
.B multibus
all paths in 1 priority group
.TP
.B group_by_serial
1 priority group per serial number
.TP
.B group_by_prio
1 priority group per priority value. Priorities are determined by
callout programs specified as a global, per-controller or
per-multipath option in the configuration file.
.TP
.B group_by_node_name
1 priority group per target node name. Target node names are fetched
in /sys/class/fc_transport/target*/node_name.
.TP
Default value is \fIfailover\fR.
.RE
.TP
.B uid_attribute
The udev attribute providing a unique path
identifier. Default value is
.I ID_SERIAL
.TP
.B prio
The name of the path priority routine. The specified routine
should return a numeric value specifying the relative priority
of this path. Higher number have a higher priority.
.I "none"
is a valid value. Currently the following path priority routines
are implemented:
.RS
.TP 12
.B const
Return a constant priority of \fI1\fR.
.TP
.B emc
Generate the path priority for EMC arrays.
.TP
.B alua
Generate the path priority based on the SCSI-3 ALUA settings. This prioritizer
accepts the optional prio_arg
.I exclusive_pref_bit
.TP
.B ontap
Generate the path priority for NetApp arrays.
.TP
.B rdac
Generate the path priority for LSI/Engenio/NetApp E-Series RDAC controller.
.TP
.B hp_sw
Generate the path priority for Compaq/HP controller in
active/standby mode.
.TP
.B ana
Generate the path priority based on the NVMe ANA settings.
.TP
.B hds
Generate the path priority for Hitachi HDS Modular storage arrays.
.TP
.B random
Generate a random priority between 1 and 10.
.TP 12
.B weightedpath
Generate the path priority based on the regular expression and the 
priority provided as argument. requires prio_args keyword.
.TP
Default value is \fBconst\fR.
.RE
.TP
.B prio_args
Arguments to pass to the prio function. This only applies to certain
prioritizers
.RS
.TP 12
.B weighted
Needs a value of the form
.I "<hbtl|devname|wwn> <regex1> <prio1> <regex2> <prio2> ..."
.I hbtl
regex can be of SCSI H:B:T:L format  Ex: 1:0:.:. , *:0:0:.
.I devname
regex can be of device name format  Ex: sda , sd.e
.I wwn
regex can be of the form
.I "host_wwnn:host_wwpn:target_wwnn:target_wwpn"
these values can be looked up through sysfs or by running
.I multipathd show paths format "%N:%R:%n:%r"
Ex: 0x200100e08ba0aea0:0x210100e08ba0aea0:.*:.* , .*:.*:iqn.2009-10.com.redhat.msp.lab.ask-06:.*
.TP
.B alua
If
.I exclusive_pref_bit
is set, paths with the TPGS pref bit set will always be in their own path
group.
.RE
.TP
.B features
Specify any device-mapper features to be used. Syntax is
.I num list
where
.I num
is the number, between 0 and 6, of features in
.I list.
Possible values for the feature list are:
.RS
.TP 12
.I queue_if_no_path
Queue IO if no path is active; identical to the
.I no_path_retry
keyword.
.TP
.I pg_init_retries
Number of times to retry pg_init, it must be between 1 and 50.
.TP
.I pg_init_delay_msecs
Number of msecs before pg_init retry, it must be between 0 and 60000.
.RE
.TP
.B path_checker
The default method used to determine the paths state. Possible values
are
.RS
.TP 12
.B readsector0
(Deprecated) Read the first sector of the device. This checker is being
deprecated, please use \fIdirectio\fR instead
.TP
.B tur
Issue a
.I TEST UNIT READY
command to the device.
.TP
.B emc_clariion
Query the EMC Clariion specific EVPD page 0xC0 to determine the path
state.
.TP
.B hp_sw
Check the path state for HP storage arrays with Active/Standby firmware.
.TP
.B rdac
Check the path state for LSI/Engenio/NetApp E-Series RDAC storage controller.
.TP
.B directio
Read the first sector with direct I/O.
.TP
.B none
Do not check the device, fallback to use the values retrieved from sysfs
.TP
Default value is \fIdirectio\fR.
.RE
.TP
.B failback
Tell multipathd how to manage path group failback.
.RS
.TP 12
.B immediate
Immediately failback to the highest priority pathgroup that contains
active paths.
.TP
.B manual
Do not perform automatic failback.
.TP
.B followover
Only perform automatic failback when the first path of a pathgroup
becomes active. This keeps a node from automatically failing back when
another node requested the failover.
.TP
.B values > 0
deferred failback (time to defer in seconds)
.TP
Default value is \fImanual\fR.
.RE
.TP
.B  rr_min_io
The number of IO to route to a path before switching to the next in
the same path group. This is only for BIO based multipath. Default is
.I 1000
.TP
.B rr_min_io_rq
The number of IO requests to route to a path before switching to the
next in the same path group. This is only for request based multipath.
Default is
.I 1
.TP
.B rr_weight
If set to \fIpriorities\fR the multipath configurator will assign
path weights as "path prio * rr_min_io". Possible values are
.I priorities
or
.IR uniform .
Default is
.IR uniform .
.TP
.B no_path_retry
Specify the number of retries until disable queueing, or
.I fail
for immediate failure (no queueing),
.I queue
for never stop queueing. Default is 0.
.TP
.B user_friendly_names
If set to 
.I yes
, using the bindings file
.I /etc/multipath/bindings
to assign a persistent and unique alias to the multipath, in the form of mpath<n>.
If set to 
.I no
use the WWID as the alias. In either case this be will
be overridden by any specific aliases in the \fImultipaths\fR section.
Default is
.I no
.TP
.B flush_on_last_del
If set to
.I yes
, multipathd will disable queueing when the last path to a device has been
deleted. Default is
.I no
.TP
.B max_fds
Specify the maximum number of file descriptors that can be opened by multipath
and multipathd.  This is equivalent to ulimit \-n. A value of \fImax\fR will set
this to the system limit from /proc/sys/fs/nr_open. If this is not set, the
maximum number of open fds is taken from the calling process. It is usually
1024. To be safe, this should be set to the maximum number of paths plus 32,
if that number is greated than 1024.
.TP
.B checker_timeout
Specify the timeout to use for path checkers and prioritizers that issue scsi
commands with an explicit timeout, in seconds; default taken from
.I /sys/block/sd<x>/device/timeout
.TP
.B fast_io_fail_tmo
Specify the number of seconds the scsi layer will wait after a problem has been
detected on a FC remote port before failing IO to devices on that remote port.
This should be smaller than dev_loss_tmo. Setting this to
.I off
will disable the timeout.
.TP
.B dev_loss_tmo
Specify the number of seconds the scsi layer will wait after a problem has
been detected on a FC remote port before removing it from the system. This
can be set to "infinity" which sets it to the max value of 2147483647
seconds, or 68 years. It will be automatically adjusted to the overall
retry interval
\fIno_path_retry\fR * \fIpolling_interval\fR
if a number of retries is given with \fIno_path_retry\fR and the
overall retry interval is longer than the specified \fIdev_loss_tmo\fR value.
The linux kernel will cap this value to \fI600\fR if \fBfast_io_fail_tmo\fR
is not set.
.TP
.B queue_without_daemon
If set to
.I no
, when multipathd stops, queueing will be turned off for all devices.
This is useful for devices that set no_path_retry.  If a machine is
shut down while all paths to a device are down, it is possible to hang waiting
for IO to return from the device after multipathd has been stopped. Without
multipathd running, access to the paths cannot be restored, and the kernel
cannot be told to stop queueing IO. Setting queue_without_daemon to
.I no
, avoids this problem. Default is
.I no
.TP
.B bindings_file
The full pathname of the binding file to be used when the user_friendly_names option is set. Defaults to
.I /etc/multipath/bindings
.TP
.B wwids_file
The full pathname of the wwids file, which is used by multipath to keep track
of the wwids for LUNs it has created multipath devices on in the past.
Defaults to
.I /etc/multipath/wwids
.TP
.B prkeys_file
The full pathname of the prkeys file, which is used by multipathd to keep
track of the reservation key used for a specific WWID, when
\fIreservation_key\fR is set to \fIfile\fR.
Defaults to
.I /etc/multipath/prkeys
.TP
.B log_checker_err
If set to
.I once
, multipathd logs the first path checker error at logging level 2. Any later
errors are logged at level 3 until the device is restored. If set to
.I always
, multipathd always logs the path checker error at logging level 2. Default is
.I always
.TP
.B reservation_key
This is the service action reservation key used by mpathpersist.  It must be
set for all multipath devices using persistent reservations, and it must be
the same as the RESERVATION KEY field of the PERSISTENT RESERVE OUT parameter
list which contains an 8-byte value provided by the application client to the
device server to identify the I_T nexus. If the \fI--param-aptpl\fR option is
used when registering the key with mpathpersist, \fB:aptpl\fR must be appended
to the end of the reservation key.

.RS
.PP
Alternatively, this can be set to \fBfile\fR, which will store the RESERVATION
KEY registered by mpathpersist in the \fIprkeys_file\fR. multipathd will then
use this key to register additional paths as they appear.  When the
registration is removed, the RESERVATION KEY is removed from the
\fIprkeys_file\fR. The prkeys file will automatically keep track of whether
the key was registered with \fI--param-aptpl\fR.
It is unset by default.
.RE
.TP
.B all_tg_pt
This must be set to \fIyes\fR to successfully use mpathpersist on arrays that
automatically set and clear registration keys on all target ports from a
host, instead of per target port per host.
Default is
.I no
.TP
.B retain_attached_hw_handler
If set to
.I yes
and the scsi layer has already attached a hardware_handler to the device,
multipath will not force the device to use the hardware_handler specified by
mutipath.conf. If the scsi layer has not attached a hardware handler,
multipath will continue to use its configured hardware handler. Default is
.I no
.TP
.B detect_prio
If set to
.I yes
, multipath will try to detect if the device supports ALUA. If so, the device
will automatically use the
.I alua
prioritizer. If not, the prioritizer will be selected as usual. Default is
.I no
.TP
.B detect_checker
If set to
.I yes
, multipath will try to detect if the device supports ALUA. If so, the device
will automatically use the
.I tur
checker. If not, the prioritizer will be selected as ususal. Default is
.I no
.TP
.B hw_str_match
If set to
.I yes
, the vendor, product, and revision parameters of user device configs will be
string matched against the built-in device configs to determine if they should
modify an existing config, or create a new one. If set to
.I no
, the user device configs will be regular expression matched against the
built-in configs instead. Default is
.I no
.TP
.B force_sync
If set to
.I yes
, multipathd will call the path checkers in sync mode only.  This means that
only one checker will run at a time.  This is useful in the case where many
multipathd checkers running in parallel causes significant CPU pressure. The
Default is
.I no
.TP
.B deferred_remove
If set to
.I yes
, multipathd will do a deferred remove instead of a regular remove when the
last path device has been deleted.  This means that if the multipath device is
still in use, it will be freed when the last user closes it.  If path is added
to the multipath device before the last user closes it, the deferred remove
will be canceled. Default is
.I no
.TP
.B config_dir
If set to anything other than "", multipath will search this directory
alphabetically for file ending in ".conf" and it will read configuration
information from them, just as if it was in /etc/multipath.conf.  config_dir
must either be "" or a fully qualified directory name. Default is
.I "/etc/multipath/conf.d"
.TP
.B delay_watch_checks
If set to a value greater than 0, multipathd will watch paths that have
recently become valid for this many checks.  If they fail again while they are
being watched, when they next become valid, they will not be used until they
have stayed up for
.I delay_wait_checks
checks. See "Shaky paths detection" below. Default is
.I no
.TP
.B delay_wait_checks
If set to a value greater than 0, when a device that has recently come back
online fails again within
.I delay_watch_checks
checks, the next time it comes back online, it will marked and delayed, and not
used until it has passed
.I delay_wait_checks
checks. See "Shaky paths detection" below. Default is
.I no
.TP
.B marginal_path_double_failed_time
One of the four parameters of supporting path check based on accounting IO
error such as intermittent error. When a path failed event occurs twice in
\fImarginal_path_double_failed_time\fR seconds due to an IO error and all the
other three parameters are set, multipathd will fail the path and enqueue
this path into a queue of which members are sent a couple of continuous
direct reading asynchronous IOs at a fixed sample rate of 10HZ to start IO
error accounting process. See "Shaky paths detection" below. Default is
\fIno\fR
.TP
.B marginal_path_err_sample_time
One of the four parameters of supporting path check based on accounting IO
error such as intermittent error. If it is set to a value no less than 120,
when a path fail event occurs twice in \fImarginal_path_double_failed_time\fR
second due to an IO error, multipathd will fail the path and enqueue this
path into a queue of which members are sent a couple of continuous direct
reading asynchronous IOs at a fixed sample rate of 10HZ to start the IO
accounting process for the path will last for
\fImarginal_path_err_sample_time\fR.
If the rate of IO error on a particular path is greater than the
\fImarginal_path_err_rate_threshold\fR, then the path will not reinstate for
\fImarginal_path_err_recheck_gap_time\fR seconds unless there is only one
active path. After \fImarginal_path_err_recheck_gap_time\fR expires, the path
will be requeueed for rechecking. If checking result is good enough, the
path will be reinstated. See "Shaky paths detection" below. Default is
\fIno\fR
.TP
.B marginal_path_err_rate_threshold
The error rate threshold as a permillage (1/1000). One of the four parameters
of supporting path check based on accounting IO error such as intermittent
error. Refer to \fImarginal_path_err_sample_time\fR. If the rate of IO errors
on a particular path is greater than this parameter, then the path will not
reinstate for \fImarginal_path_err_recheck_gap_time\fR seconds unless there is
only one active path. See "Shaky paths detection" below. Default is \fIno\fR
.TP
.B marginal_path_err_recheck_gap_time
One of the four parameters of supporting path check based on accounting IO
error such as intermittent error. Refer to
\fImarginal_path_err_sample_time\fR. If this parameter is set to a positive
value, the failed path of  which the IO error rate is larger than
\fImarginal_path_err_rate_threshold\fR will be kept in failed state for
\fImarginal_path_err_recheck_gap_time\fR seconds. When
\fImarginal_path_err_recheck_gap_time\fR seconds expires, the path will be
requeueed for checking. If checking result is good enough, the path will be
reinstated, or else it will keep failed. See "Shaky paths detection" below.
Default is \fIno\fR
.TP
.B missing_uev_wait_timeout
Controls how many seconds multipathd will wait, after a new multipath device
is created, to receive a change event from udev for the device, before
automatically enabling device reloads. Usually multipathd will delay reloads
on a device until it receives a change uevent from the initial table load. The
default is
.I 30
.TP
.B skip_kpartx
If set to
.I yes
, kpartx will not automatically create partitions on the device. The default is
.I no
.TP
.B ignore_new_boot_devs
If set to
.I yes
, multipath will never attempt to create a multipath device whose wwid is not
listed in /etc/multipath/wwids, while running in the initramfs.  This keeps
multipath from adding new devices during the initramfs portion of bootup. The
default is
.I no
.TP
.B retrigger_tries
This sets how many times multipathd will reissue change uevents on block
devices that are not blacklisted, but have no wwid set by udev. Multipath
assumes that any devices that should not report a wwid are blacklisted. This
means that if a non-blacklisted device has no wwid, it is likely that udev
timed out while processing it.  Multipathd will wait for a while, and then
reissue a change uevent to give udev another chance to set the wwid. The
default is
.I 3
.TP
.B retrigger_delay
This sets how long multipathd should wait, after receiving a uevent for a
non-blacklisted device without a wwid set by udev, before reissuing a
change uevent.  The goal of this delay is to give udev a chance to finish
processing its current batch of uevents before sending more, to hopefully
avoid it timing out. The default is
.I 10
.TP
.B new_bindings_in_boot
If set to
.I yes
, multipath will allow new user_friendly_names bindings to be created while
running in the initramfs.  Otherwise, multipath will not create
user_friendly_names bindings while running in the initramfs. Instead, it will
use the WWID for the name of a device that was configured to use
user_friendly_names.  When multipathd is restarted later in boot on the
regular filesystem, the device will be renamed to a user_friendly_name. The
default is
.I no
.TP
.B disable_changed_wwids
If set to \fIyes\fR, multipathd will check the path wwid on change events, and
if it has changed from the wwid of the multipath device, multipathd will
disable access to the path until the wwid changes back. The default is
.I no
.TP
.B remove_retries
This sets how may times multipath will retry removing a device that is in-use.
Between each attempt, multipath will sleep 1 second. The default is
.I 0
.TP
.B max_sectors_kb
Sets the max_sectors_kb device parameter on all path devices and the multipath
device to the specified value. Default is device dependent.
.TP
.B unpriv_sgio
If set to \fIyes\fR, multipath will set upriv_sgio on the multipath device and
all its paths, when it is created or reloaded. The default is
.I no
.TP
.B ghost_delay
Sets the number of seconds that multipath will wait after creating a device
with only ghost paths before marking it ready for use in systemd. This gives
the active paths time to appear before the multipath runs the hardware handler
to switch the ghost paths to active ones. Setting this to \fI0\fR or \fIoff\fR
makes multipath immediately mark a device with only ghost paths as ready. The
default is
.I off
.
.SH "blacklist section"
The
.I blacklist
section is used to exclude specific device from inclusion in the
multipath topology. It is most commonly used to exclude local disks or
LUNs for the array controller.
.LP
The following keywords are recognized:
.TP 17
.B wwid
The \fIWorld Wide Identification\fR of a device.
.TP
.B devnode
Regular expression of the device nodes to be excluded.
.TP
.B property
Regular expresion of the udev property to be excluded.
.TP
.B protocol
Regular expression of the protocol to be excluded. See below for a
list of recognized protocols
.TP
.B device
Subsection for the device description. This subsection recognizes the
.I vendor
and
.I product
keywords. For a full description of these keywords please see the
.I devices
section description.
.LP
The protocol strings that multipath recognizes are \fIscsi:fcp\fR,
\fIscsi:spi\fR, \fIscsi:ssa\fR, \fIscsi:sbp\fR, \fIscsi:srp\fR,
\fIscsi:iscsi\fR, \fIscsi:sas\fR, \fIscsi:adt\fR, \fIscsi:ata\fR,
\fIscsi:unspec\fR, \fIccw\fR, \fIcciss\fR, \fInvme\fR, and \fIundef\fR.
The protocol that a path is using can be viewed by running
\fBmultipathd show paths format "%d %P"\fR
.SH "blacklist_exceptions section"
The
.I blacklist_exceptions
section is used to revert the actions of the
.I blacklist
section, ie to include specific device in the
multipath topology. This allows one to selectively include devices which
would normally be excluded via the
.I blacklist
section.
.LP
The following keywords are recognized:
.TP 17
.B wwid
The \fIWorld Wide Identification\fR of a device.
.TP
.B property
Regular expresion of the udev property to be whitelisted.
.TP
.B protocol
Regular expression of the protocol to be whitelisted. See the
\fBblacklist section\fR for a list of recognized protocols
.TP
.B devnode
Regular expression of the device nodes to be whitelisted.
.TP
.B device
Subsection for the device description. This subsection recognizes the
.I vendor
and
.I product
keywords. For a full description of these keywords please see the
.I devices
section description.
.LP
The
.I property
blacklist and whitelist handling is different from the usual handling
in the sense that if the whitelist is set, it
.B has
to match, otherwise the device will be blacklisted.
In these cases the message
.I blacklisted, udev property missing
will be displayed. For example settting the
.I property
blacklist_exception to
.I (SCSI_IDENT_|ID_WWN)
will blacklist all devices that have no udev property whose name regex matches
either
.I SCSI_IDENT_
or
.I ID_WWN.
This works to exclude most non-multipathable devices.
.SH "multipaths section"
The only recognized attribute for the
.B multipaths
section is the
.I multipath
subsection.
.LP
The
.B multipath
subsection recognizes the following attributes:
.TP 17
.B wwid
Index of the container. Mandatory for this subsection.
.TP
.B alias
(Optional) symbolic name for the multipath map.
.LP
The following attributes are optional; if not set the default values
are taken from the
.I defaults
or
.I devices
section:
.sp 1
.PD .1v
.RS
.TP 18
.B path_grouping_policy
.TP
.B path_selector
.TP
.B prio
.TP
.B prio_args
.TP
.B failback
.TP
.B rr_weight
.TP
.B flush_on_last_del
.TP
.B user_friendly_names
.TP
.B no_path_retry
.TP
.B rr_min_io
.TP
.B rr_min_io_q
.TP
.B features
.TP
.B reservation_key
.TP
.B deferred_remove
.TP
.B delay_watch_checks
.TP
.B delay_wait_checks
.TP
.B marginal_path_err_sample_time
.TP
.B marginal_path_err_rate_threshold
.TP
.B marginal_path_err_recheck_gap_time
.TP
.B marginal_path_double_failed_time
.TP
.B skip_kpartx
.TP
.B max_sectors_kb
.TP
.B unpriv_sgio
.TP
.B ghost_delay
.RE
.PD
.LP
.SH "devices section"
The only recognized attribute for the
.B devices
section is the
.I device
subsection.
.LP
The
.I device
subsection recognizes the following attributes:
.TP 17
.B vendor
(Mandatory) Vendor identifier
.TP
.B product
(Mandatory) Product identifier
.TP
.B revision
(Optional) Revision identfier
.TP
.B product_blacklist
(Optional) Product strings to blacklist for this vendor
.TP
.B alias_prefix
(Optional) The user_friendly_names prefix to use for this
device type, instead of the default "mpath"
.TP
.B hardware_handler
(Optional) The hardware handler to use for this device type.
The following hardware handler are implemented:
.RS
.TP 12
.B 1 emc
Hardware handler for EMC storage arrays.
.TP
.B 1 rdac
Hardware handler for LSI/Engenio/NetApp E-Series RDAC storage controller.
.TP
.B 1 hp_sw
Hardware handler for Compaq/HP storage arrays in active/standby
mode.
.TP
.B 1 alua
Hardware handler for SCSI-3 ALUA compatible arrays.
.RE
.LP
The following attributes are optional; if not set the default values
are taken from the
.I defaults
section:
.sp 1
.PD .1v
.RS
.TP 18
.B path_grouping_policy
.TP
.B uid_attribute
.TP
.B path_selector
.TP
.B path_checker
.TP
.B prio
.TP
.B prio_args
.TP
.B features
.TP
.B failback
.TP
.B rr_weight
.TP
.B no_path_retry
.TP
.B user_friendly_names
.TP
.B rr_min_io
.TP
.B rr_min_io_rq
.TP
.B fast_io_fail_tmo
.TP
.B dev_loss_tmo
.TP
.B flush_on_last_del
.TP
.B retain_attached_hw_handler
.TP
.B detect_prio
.TP
.B deferred_remove
.TP
.B delay_watch_checks
.TP
.B delay_wait_checks
.TP
.B marginal_path_err_sample_time
.TP
.B marginal_path_err_rate_threshold
.TP
.B marginal_path_err_recheck_gap_time
.TP
.B marginal_path_double_failed_time
.TP
.B skip_kpartx
.TP
.B max_sectors_kb
.TP
.B unpriv_sgio
.TP
.B ghost_delay
.RE
.PD
.LP
.SH "Shaky paths detection"
A common problem in SAN setups is the occurence of intermittent errors: a
path is unreachable, then reachable again for a short time, disappears again,
and so forth. This happens typically on unstable interconnects. It is
undesirable to switch pathgroups unnecessarily on such frequent, unreliable
events. \fImultipathd\fR supports two different methods for detecting this
situation and dealing with it. Both methods share the same basic mode of
operation: If a path is found to be \(dqshaky\(dq or \(dqflipping\(dq,
and appears to be in healthy status, it is not reinstated (put back to use)
immediately. Instead, it is watched for some time, and only reinstated
if the healthy state appears to be stable. The logic of determining
\(dqshaky\(dq condition, as well as the logic when to reinstate,
differs between the two methods.
.TP 8
.B \(dqdelay_checks\(dq failure tracking
If a path fails again within a
\fIdelay_watch_checks\fR interval after a failure, don't
reinstate it until it passes a \fIdelay_wait_checks\fR interval
in always good status.
The intervals are measured in \(dqticks\(dq, i.e. the
time between path checks by multipathd, which is variable and controlled by the
\fIpolling_interval\fR and \fImax_polling_interval\fR parameters.
.TP
.B \(dqmarginal_path\(dq failure tracking
If a second failure event (good->bad transition) occurs within
\fImarginal_path_double_failed_time\fR seconds after a failure, high-frequency
monitoring is started for the affected path: I/O is sent at a rate of 10 per
second. This is done for \fImarginal_path_err_sample_time\fR seconds. During
this period, the path is not reinstated. If the
rate of errors remains below \fImarginal_path_err_rate_threshold\fR during the
monitoring period, the path is reinstated. Otherwise, it
is kept in failed state for \fImarginal_path_err_recheck_gap_time\fR, and
after that, it is monitored again. For this method, time intervals are measured
in seconds.
.RE
.LP
See the documentation
of the individual options above for details.
It is \fBstrongly discouraged\fR to use more than one of these methods for any
given multipath map, because the two concurrent methods may interact in
unpredictable ways.
.SH "KNOWN ISSUES"
The usage of
.B queue_if_no_path
option can lead to
.B D state
processes being hung and not killable in situations where all the paths to the LUN go offline.
It is advisable to use the
.B no_path_retry
option instead.
.P
The use of
.B queue_if_no_path
or
.B no_path_retry
might lead to a deadlock if the
.B dev_loss_tmo
setting results in a device being removed while I/O is still queued.
The multipath daemon will update the
.B dev_loss_tmo
setting accordingly to avoid this deadlock. Hence if both values are
specified the order of precedence is
.I no_path_retry, queue_if_no_path, dev_loss_tmo

.SH "SEE ALSO"
.BR udev (8),
.BR dmsetup (8)
.BR multipath (8)
.BR multipathd (8)
.SH AUTHORS
.B multipath
was developed by Christophe Varoqui, <christophe.varoqui@opensvc.com> and others.
